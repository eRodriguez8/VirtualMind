//Jenkinsfile (Scripted Pipeline)

node {
	def MSBuild = tool name: 'Con Soporte C# 6', type: 'msbuild'
    def OpenCover = "\"C:\\Program Files (x86)\\OpenCover\\OpenCover.Console.exe\""
	def MSTest = tool name: 'Visual Studio 2014', type: 'org.jenkinsci.plugins.MsTestInstallation'
	def ReportGenerator = "\"c:\\Tools\\ReportGenerator\\ReportGenerator.exe\""
	def OpenCoverToCoberturaConverter = "\"C:\\Tools\\OpenCoverToCoberturaConverter\\OpenCoverToCoberturaConverter.exe\""
	def SqlCmd = "\"C:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\SQLCMD.EXE\""
	
	def APP = "Sua"
	def MODULO = "Auditoria"

	def BuildConfiguration = "Release"
	def GITOrigen = 'http://gitlab.cencosud.corp/Celula_Logistica_SUA/auditoria_sua.git'
	
	def zip = "\"C:\\Program Files\\7-Zip\\7z.EXE\""
	int idxAmbiente = (BRANCH_NAME == 'develop') ? 0 : (BRANCH_NAME == 'ide') ? 1 : (BRANCH_NAME == 'prod') ? 2 : 0

	def DBScriptPath ='\\CAMBIOS\\'

	String[][] ApiServers = [
    ["\\\\G100603SV216\\G\$\\${MODULO}\\Api"], 
    ["\\\\G100603SVBKM\\Sites\\${MODULO}\\Api"],
	["\\\\D095SRTEC06\\J\$\\${MODULO}\\Api"]
    ]

	String[][] WebSiteServers = [
    ["\\\\G100603SV216\\G\$\\${MODULO}\\Web"],
    ["\\\\G100603SVBKM\\Sites\\${MODULO}\\Web"],
	["\\\\D095SRTEC06\\J\$\\${MODULO}\\Web"]
    ]
	
	String[][] PocketSiteServers = [
    ["\\\\G100603SV216\\G\$\\${MODULO}\\Pocket"],
    ["\\\\G100603SVBKM\\Sites\\${MODULO}\\Pocket"],
	["\\\\D095SRTEC06\\J\$\\${MODULO}\\Pocket"]
    ]

	String[][] DataBaseServers = [
    ["G100603SV216"],
	["G100603SVBKM"],
	["D095SRTEC06"],
    ]

	properties([parameters([
		string(defaultValue: '1.0.0.0', description: 'Nro de version a entregar', name: 'VERSION'),
		booleanParam(defaultValue: true, description: 'Instalar Api', name: 'API'),
		booleanParam(defaultValue: true, description: 'Instalar WebSite', name: 'WEBSITE'),
		booleanParam(defaultValue: true, description: 'Instalar WebSite', name: 'POCKET'),
		booleanParam(defaultValue: false, description: 'Ejecutar los scripts de base de datos', name: 'RUNSCRIPTS'),
		booleanParam(defaultValue: false, description: 'Usar version ya publicada', name: 'HOT_FIX'),
		booleanParam(defaultValue: false, description: 'Generar Reportes', name: 'REPORTS')
		]), pipelineTriggers([]), disableConcurrentBuilds()
	])
	
	stage('Info of delivery') {
		String msg = "Version a generar ${params.VERSION}\n"
		msg = msg + "Instalar en: ${BRANCH_NAME}\n"
		echo msg
	}

	def ambiente = getAmbiente(BRANCH_NAME)

	stage('Cleaning Folders') {
		parallel api: {
		  bat '''IF EXIST Publish RD Publish /S /Q
						Exit 0 '''
		},
		website: {
			bat """cd ${APP}.${MODULO}.Web
			  IF EXIST dist RD dist /S /Q
						Exit 0 """
		},
		instalables: {
			bat '''IF EXIST Instalables RD Instalables /S /Q
					IF EXIST *.zip DEL /Q /F *.zip
					Exit 0
					'''
		},
		dblog: {
			bat '''IF EXIST LogDB RD LogDB /S /Q
						Exit 0 '''
		}
	}

	stage('Checkout') { 
		def rama = BRANCH_NAME
		checkout([$class: 'GitSCM', branches: [[name: rama]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-user-pass', url: """${GITOrigen}"""]]])
	}
	
	stage('Getting packages') {
		parallel npm: {
			nodejs('Node 10.15.1') {
				bat """rem Getting npm packages
					cd ${APP}.${MODULO}.Web
					npm install"""
			}
		},
		nuget: {
			bat '''rem Getting nuget packages
				.\\nuget\\nuget.exe sources add -Name NuGet-Package-Source -Source \\\\g100603SV216\\NugetPackage
          		.\\nuget\\nuget.exe restore'''
		}
	}
	 
	stage('Rebuild sass') {
		nodejs('Node 10.10.0') {
				bat '''cd ${APP}.${MODULO}.Web
					npm rebuild node-sass'''
			}
	}
	
	changeVersionInGlobalAssemblyInfo()
	
	stage('Build') {
         parallel api: {	
			bat "\"${MSBuild}\" ${APP}.${MODULO}.Sln /t:clean,build /p:Configuration=${BuildConfiguration} /p:Platform=\"Any CPU\" /p:ProductVersion=${params.VERSION} /p:DeployOnBuild=true /p:PublishProfile=${ambiente}.pubxml /p:VisualStudioVersion=14.0 "
		 },
		 website: {
			nodejs('Node 10.15.1') {
				bat """ cd ${APP}.${MODULO}.Web
				npm run ${ambiente} """
			}
		}
	}
	
	stage('Post build task') {
		parallel delWebConfig: {
			bat """rem Deleting web.config
				IF EXIST Publish\\${APP}.${MODULO}.Web\\web.config DEL /F Publish\\${APP}.${MODULO}.Web\\web.config"""
		},
		copyAngularApp: {
			bat """rem ${APP}.${MODULO}.Web
				XCOPY ${APP}.${MODULO}.Web\\dist Publish\\${APP}.${MODULO} /s /e /i"""
		}
	}

	stage('Testing') {
		bat '''RD TestResults /S /Q 
			MD TestResults'''
		bat "${OpenCover} -register:user -target:\"${MSTest}\" -targetargs:\"/noisolation /resultsfile:TestResults\\TestResults.trx /testcontainer:${APP}.${MODULO}.Test\\bin\\${BuildConfiguration}\\${APP}.${MODULO}.Test.dll\" -filter:\"+[${APP}.${MODULO}*]* -[${APP}.${MODULO}.Test*]* -[${APP}.${MODULO}.Dal*]* -[${APP}.${MODULO}.Web*]* -[${APP}.${MODULO}.Pocket*]* -[${APP}.${MODULO}.Api/App_Start*]* -[${APP}.${MODULO}.DB*]*\" -excludebyfile:\"*\\*Designer.cs Global.asax.cs\" -mergebyhash -output:projectCoverageReport.xml"
	}

	stage('Generating Reports') {
	if (params.REPORTS) {
		bat 'IF NOT EXIST Reports MKDIR Reports'
			bat "${ReportGenerator} -reports:projectCoverageReport.xml -targetDir:Reports"
			bat "${OpenCoverToCoberturaConverter} -input:projectCoverageReport.xml -output:Cobertura.xml"
			step([$class: 'CoberturaPublisher', coberturaReportFile: 'Cobertura.xml'])
			step([$class: 'MSTestPublisher', testResultsFile:"TestResults\\TestResults.trx", failOnError: true, keepLongStdio: true])
		}
	}

	stage('Deploying') {
		parallel website: {
			if (params.WEBSITE) {
				echo "Deployando Website"
				for ( int i = 0; i < WebSiteServers[idxAmbiente].size(); i++ ) {
					copyVersionCleanServer(".\\${APP}.${MODULO}.Web\\dist\\${MODULO}", WebSiteServers[idxAmbiente][i])
				}
			}
		},
		api: {
			if (params.API) {
				echo "Deployando Api"
				for ( int i = 0; i < ApiServers[idxAmbiente].size(); i++ ) {
					copyVersionServer(".\\Publish\\${BRANCH_NAME}\\api", ApiServers[idxAmbiente][i])
				}
			}
		},
		pocket: {
			if (params.POCKET) {
				echo "Deployando Pocket"
				for ( int i = 0; i < PocketSiteServers[idxAmbiente].size(); i++ ) {
					copyVersionServer(".\\Publish\\${BRANCH_NAME}\\pocket", PocketSiteServers[idxAmbiente][i])
				}
			}
		}
	}
	
	stage('Running db scripts') {
		if (params.RUNSCRIPTS && params.VERSION != '')  {
			echo "Ejecutando Scripts"
			bat '''IF EXIST LogDB RD LogDB /S /Q
				mkdir LogDB'''
			powershell """
			\$localScriptRoot = "${APP}.${MODULO}.DB\\${params.VERSION}\\${DBScriptPath}"
			\$Server = \"${DataBaseServers[0][0]}\"
			\$scripts = Get-ChildItem \$localScriptRoot | Where-Object {\$_.Extension -eq ".sql"}

			foreach (\$s in \$scripts)
				{
					echo "Running Script : " \$s.Name
					\$script = \$s.FullName
					& ${SqlCmd} -S \$Server -i \$script -r0 1>> LogDB\\logDB.txt 2>> LogDB\\errorDB.txt
				}
			"""
		}
	}
	
	checkout([$class: 'GitSCM', branches: [[name: BRANCH_NAME]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-user-pass', url: """${GITOrigen}"""]]])
	
	stage('Sending Notifications') {
		String deployoApi = ""
		String deployoWeb = ""
		if (params.API){
			deployoApi = "${MODULO}"
		}
		if (params.WEBSITE){
			deployoWeb = "${MODULO}"
		}

		def mailBody = readFile("Automation\\MailEntregaTemplate.html")
		String mailSubject = "Entrega version Release ${params.VERSION} - ${MODULO}"
		mailBody = mailBody.replace("%SCRIPTS%", "Script")
			.replace("%AMBIENTE%", "${ambiente}")
			.replace("%API%", "${deployoApi}")
			.replace("%WEB%", "${deployoWeb}")		
		emailext body: mailBody,
			attachmentsPattern: "LogDB\\errorDB.txt",
			subject: mailSubject,
			to:  env.SuperNet_SUA_Mails
	}

	stage('Running Sonar') {
		if (BRANCH_NAME == 'develop'){
			sonarScanner()
		}
	}
}

def sonarScanner() {	
	withSonarQubeEnv() {
			def	Sonar= tool name: 'runer01', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
			String sonarCmd = "\"${Sonar}\\bin\\sonar-scanner.bat\" "
			sonarCmd = sonarCmd + "-Dsonar.host.url=${SONAR_HOST_URL} "
			sonarCmd = sonarCmd + "-Dsonar.login=${SONAR_AUTH_TOKEN} "
			sonarCmd = sonarCmd + "-Dproject.settings=${WORKSPACE} "
			sonarCmd = sonarCmd + "-Dsonar.sources=. "
			sonarCmd = sonarCmd + "-Dsonar.exclusions=**/obj/**,**/bin/**,**/Reference.cs,**/*Test.cs,**/Reports/**,**/packages/**,**/**.Designer.cs,**/Publish/**,**/Sua.Auditoria.Web/**,**/Sua.Auditoria.Pocket/**,**/Sua.Auditoria.Test/**,**/Sua.Auditoria.Dal/** "
			sonarCmd = sonarCmd + "-Dsonar.projectVersion=1 "
			sonarCmd = sonarCmd + "-Dsonar.cs.opencover.reportsPaths=projectCoverageReport.xml "
			sonarCmd = sonarCmd + "-Dsonar.cs.vstest.reportsPaths=TestResults/TestResults.trx "
			sonarCmd = sonarCmd + "-Dsonar.projectKey=SuperNet-Sua-Auditorias "
			sonarCmd = sonarCmd + "-Dsonar.verbose=true "
			sonarCmd = sonarCmd + "-Dsonar.scm.disabled=true "
			sonarCmd = sonarCmd + "-Dsonar.projectName=SuperNet-Sua-Auditorias "
			sonarCmd = sonarCmd + "-Dsonar.projectBaseDir=${WORKSPACE}"
			bat sonarCmd
	}
}

def changeVersionInGlobalAssemblyInfo(){
	stage('Changing version in GlobalAssemblyInfo') {
		writeFile file: 'GlobalAssemblyInfo.cs', 
			text: """using System.Reflection;
			[assembly: AssemblyVersion(\"${params.VERSION}\")]
			[assembly: AssemblyFileVersion(\"${params.VERSION}\")]
			[assembly: AssemblyInformationalVersion(\"${params.VERSION}\")]"""
	}
}

def getAmbiente(branch){
	def result
	switch(branch) {
	  case 'develop':
		result = 'desa'
		break
	  case 'ide':
		result = 'ide'
		break
	  case 'prepro':
		result = "prepro"
		break
	  case 'prod':
		result = "prod"
		break
	  default:
		result = "desa"
		break
	}
	return result
}

def checkVersionServer(server, version) {
	powershell """\$VersionServer = (Invoke-WebRequest -UseBasicParsing -Uri \"${server}\").Content
		echo \$VersionServer
		if (\$VersionServer -eq \"${version}\") { Exit 0 } else { Exit 1} """
}

def copyVersionServer(source, dest) {
	bat """XCOPY \"${source}\" \"${dest}\" /s /e /i /Y"""
}

def copyVersionCleanServer(source, dest) {
	powershell "Remove-Item -Recurse -Force -path ${dest}\\*"
  bat """XCOPY \"${source}\" \"${dest}\" /s /e /i /Y"""
}
